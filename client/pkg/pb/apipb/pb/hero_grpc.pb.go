// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: hero.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HeroServiceClient is the client API for HeroService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeroServiceClient interface {
	FindOne(ctx context.Context, in *HeroById, opts ...grpc.CallOption) (*Hero, error)
	FindMany(ctx context.Context, opts ...grpc.CallOption) (HeroService_FindManyClient, error)
}

type heroServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHeroServiceClient(cc grpc.ClientConnInterface) HeroServiceClient {
	return &heroServiceClient{cc}
}

func (c *heroServiceClient) FindOne(ctx context.Context, in *HeroById, opts ...grpc.CallOption) (*Hero, error) {
	out := new(Hero)
	err := c.cc.Invoke(ctx, "/hero.HeroService/FindOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heroServiceClient) FindMany(ctx context.Context, opts ...grpc.CallOption) (HeroService_FindManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &HeroService_ServiceDesc.Streams[0], "/hero.HeroService/FindMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &heroServiceFindManyClient{stream}
	return x, nil
}

type HeroService_FindManyClient interface {
	Send(*HeroById) error
	Recv() (*Hero, error)
	grpc.ClientStream
}

type heroServiceFindManyClient struct {
	grpc.ClientStream
}

func (x *heroServiceFindManyClient) Send(m *HeroById) error {
	return x.ClientStream.SendMsg(m)
}

func (x *heroServiceFindManyClient) Recv() (*Hero, error) {
	m := new(Hero)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HeroServiceServer is the server API for HeroService service.
// All implementations must embed UnimplementedHeroServiceServer
// for forward compatibility
type HeroServiceServer interface {
	FindOne(context.Context, *HeroById) (*Hero, error)
	FindMany(HeroService_FindManyServer) error
	mustEmbedUnimplementedHeroServiceServer()
}

// UnimplementedHeroServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHeroServiceServer struct {
}

func (UnimplementedHeroServiceServer) FindOne(context.Context, *HeroById) (*Hero, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedHeroServiceServer) FindMany(HeroService_FindManyServer) error {
	return status.Errorf(codes.Unimplemented, "method FindMany not implemented")
}
func (UnimplementedHeroServiceServer) mustEmbedUnimplementedHeroServiceServer() {}

// UnsafeHeroServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeroServiceServer will
// result in compilation errors.
type UnsafeHeroServiceServer interface {
	mustEmbedUnimplementedHeroServiceServer()
}

func RegisterHeroServiceServer(s grpc.ServiceRegistrar, srv HeroServiceServer) {
	s.RegisterService(&HeroService_ServiceDesc, srv)
}

func _HeroService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeroById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeroServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hero.HeroService/FindOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeroServiceServer).FindOne(ctx, req.(*HeroById))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeroService_FindMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HeroServiceServer).FindMany(&heroServiceFindManyServer{stream})
}

type HeroService_FindManyServer interface {
	Send(*Hero) error
	Recv() (*HeroById, error)
	grpc.ServerStream
}

type heroServiceFindManyServer struct {
	grpc.ServerStream
}

func (x *heroServiceFindManyServer) Send(m *Hero) error {
	return x.ServerStream.SendMsg(m)
}

func (x *heroServiceFindManyServer) Recv() (*HeroById, error) {
	m := new(HeroById)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HeroService_ServiceDesc is the grpc.ServiceDesc for HeroService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeroService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hero.HeroService",
	HandlerType: (*HeroServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindOne",
			Handler:    _HeroService_FindOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindMany",
			Handler:       _HeroService_FindMany_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hero.proto",
}
